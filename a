diff --git a/libraries/abi_generator/CMakeLists.txt b/libraries/abi_generator/CMakeLists.txt
index 1e997cd..e8d1daa 100644
--- a/libraries/abi_generator/CMakeLists.txt
+++ b/libraries/abi_generator/CMakeLists.txt
@@ -19,30 +19,30 @@ target_include_directories(abi_generator
                                   "/usr/local/opt/openssl/include"
                                   "${LLVM_INCLUDE_DIRS}")
 
-#target_link_libraries(abi_generator eosio_chain
-#  clangRewrite
-#  clangTooling
-#  clangToolingCore
-#  clangFrontend
-#  clangDriver
-#  clangSerialization
-#  clangParse
-#  clangSema
-#  clangAnalysis
-#  clangAST
-#  clangBasic
-#  clangEdit
-#  clangLex
-#)
+target_link_libraries(abi_generator
+  clangRewrite
+  clangTooling
+  clangToolingCore
+  clangFrontend
+  clangDriver
+  clangSerialization
+  clangParse
+  clangSema
+  clangAnalysis
+  clangAST
+  clangBasic
+  clangEdit
+  clangLex
+)
 
 target_link_libraries(abi_generator
-  LLVMX86AsmParser # MC, MCParser, Support, X86CodeGen, X86Desc, X86Info
-  LLVMX86CodeGen # Analysis, AsmPrinter, CodeGen, Core, MC, Support, Target, 
+#  LLVMX86AsmParser # MC, MCParser, Support, X86CodeGen, X86Desc, X86Info
+#  LLVMX86CodeGen # Analysis, AsmPrinter, CodeGen, Core, MC, Support, Target, 
                  # X86AsmPrinter, X86Desc, X86Info, X86Utils
-  LLVMX86Desc # MC, MCDisassembler, Object, Support, X86AsmPrinter, X86Info
-  LLVMX86AsmPrinter # MC, Support, X86Utils
-  LLVMX86Info # Support
-  LLVMX86Utils # Core, Support
+#  LLVMX86Desc # MC, MCDisassembler, Object, Support, X86AsmPrinter, X86Info
+#  LLVMX86AsmPrinter # MC, Support, X86Utils
+#  LLVMX86Info # Support
+#  LLVMX86Utils # Core, Support
   LLVMCodeGen # Analysis, Core, MC, Scalar, Support, Target, TransformUtils
   LLVMipo
   LLVMScalarOpts
@@ -61,6 +61,10 @@ target_link_libraries(abi_generator
   #LLVMBinaryFormat # Support
   LLVMSupport # Demangle
   LLVMDemangle
+  LLVMMC
+  fc
+  graphene_db
+  graphene_chain
 )
 
 #if (USE_PCH)
diff --git a/libraries/abi_generator/include/graphene/abi_generator/abi_generator.hpp b/libraries/abi_generator/include/graphene/abi_generator/abi_generator.hpp
index 3c8ce8e..19fef5f 100644
--- a/libraries/abi_generator/include/graphene/abi_generator/abi_generator.hpp
+++ b/libraries/abi_generator/include/graphene/abi_generator/abi_generator.hpp
@@ -34,6 +34,7 @@
 #include "clang/Tooling/CommonOptionsParser.h"
 #include "clang/Tooling/Core/QualTypeNames.h"
 #include "llvm/Support/raw_ostream.h"
+#include "llvm/Support/CommandLine.h"
 #include <boost/algorithm/string.hpp>
 #include <boost/range/algorithm_ext/erase.hpp>
 
@@ -344,7 +345,7 @@ namespace graphene {
 
                auto* id = token.getIdentifierInfo();
                if( id == nullptr ) return;
-               if( id->getName() != "EOSIO_ABI" ) return;
+               if( id->getName() != "GXB_ABI" ) return;
 
                const auto& sm = compiler_instance.getSourceManager();
                auto file_name = sm.getFilename(range.getBegin());
@@ -358,7 +359,7 @@ namespace graphene {
                clang::SourceLocation e(clang::Lexer::getLocForEndOfToken(_e, 0, sm, compiler_instance.getLangOpts()));
                auto macrostr = string(sm.getCharacterData(b), sm.getCharacterData(e)-sm.getCharacterData(b));
 
-               regex r(R"(EOSIO_ABI\s*\(\s*(.+?)\s*,((?:.+?)*)\s*\))");
+               regex r(R"(GXB_ABI\s*\(\s*(.+?)\s*,((?:.+?)*)\s*\))");
                smatch smatch;
                auto res = regex_search(macrostr, smatch, r);
                ABI_ASSERT( res );
diff --git a/libraries/chain/CMakeLists.txt b/libraries/chain/CMakeLists.txt
index 5fa2e29..9c95e13 100644
--- a/libraries/chain/CMakeLists.txt
+++ b/libraries/chain/CMakeLists.txt
@@ -110,6 +110,8 @@ add_library( graphene_chain
              block_database.cpp
 
              is_authorized_asset.cpp
+             
+             abi_serializer.cpp
 
              ${HEADERS}
              ${PROTOCOL_HEADERS}
diff --git a/libraries/chain/abi_serializer.cpp b/libraries/chain/abi_serializer.cpp
index a75596c..193b5ba 100644
--- a/libraries/chain/abi_serializer.cpp
+++ b/libraries/chain/abi_serializer.cpp
@@ -7,10 +7,11 @@
 //#include <eosio/chain/authority.hpp>
 //#include <eosio/chain/chain_config.hpp>
 //#include <eosio/chain/transaction.hpp>
-//#include <eosio/chain/asset.hpp>
+//#include <graphene/chain/protocol/asset.hpp>
 #include <fc/io/raw.hpp>
 #include <boost/algorithm/string/predicate.hpp>
 #include <fc/io/varint.hpp>
+#include <graphene/chain/symbol.hpp>
 
 using namespace boost;
 
@@ -52,6 +53,7 @@ namespace graphene { namespace chain {
       set_abi(abi);
    }
 
+//   using abi_int128_t            = __int128;
    void abi_serializer::configure_built_in_types() {
 
       built_in_types.emplace("bool",                      pack_unpack<uint8_t>());
@@ -63,7 +65,7 @@ namespace graphene { namespace chain {
       built_in_types.emplace("uint32",                    pack_unpack<uint32_t>());
       built_in_types.emplace("int64",                     pack_unpack<int64_t>());
       built_in_types.emplace("uint64",                    pack_unpack<uint64_t>());
-      built_in_types.emplace("int128",                    pack_unpack<int128_t>());
+//      built_in_types.emplace("int128",                    pack_unpack<abi_int128_t>());//TODO FIXME
       built_in_types.emplace("uint128",                   pack_unpack<uint128_t>());
       built_in_types.emplace("varint32",                  pack_unpack<fc::signed_int>());
       built_in_types.emplace("varuint32",                 pack_unpack<fc::unsigned_int>());
@@ -75,7 +77,7 @@ namespace graphene { namespace chain {
 
       built_in_types.emplace("time_point",                pack_unpack<fc::time_point>());
       built_in_types.emplace("time_point_sec",            pack_unpack<fc::time_point_sec>());
-      built_in_types.emplace("block_timestamp_type",      pack_unpack<block_timestamp_type>());
+//      built_in_types.emplace("block_timestamp_type",      pack_unpack<block_timestamp_type>());
 
       built_in_types.emplace("name",                      pack_unpack<name>());
 
@@ -92,7 +94,7 @@ namespace graphene { namespace chain {
       built_in_types.emplace("symbol",                    pack_unpack<symbol>());
       built_in_types.emplace("symbol_code",               pack_unpack<symbol_code>());
       built_in_types.emplace("asset",                     pack_unpack<asset>());
-      built_in_types.emplace("extended_asset",            pack_unpack<extended_asset>());
+//      built_in_types.emplace("extended_asset",            pack_unpack<extended_asset>());
    }
 
    void abi_serializer::set_abi(const abi_def& abi) {
diff --git a/libraries/chain/include/graphene/chain/protocol/types.hpp b/libraries/chain/include/graphene/chain/protocol/types.hpp
index d85e36a..a186bf2 100644
--- a/libraries/chain/include/graphene/chain/protocol/types.hpp
+++ b/libraries/chain/include/graphene/chain/protocol/types.hpp
@@ -107,6 +107,11 @@ namespace graphene { namespace chain {
    using permission_name  = name;
    using table_name       = name;
    
+//   using int128_t            = boost::multiprecision::int128_t;
+   using checksum256_type    = fc::sha256;
+   using checksum512_type    = fc::sha512;
+   using checksum160_type    = fc::ripemd160;
+   
    typedef vector<std::pair<uint16_t,vector<char>>> abi_extensions_type;
 
    struct operation_ext_version_t {
diff --git a/libraries/chain/protocol/asset.cpp b/libraries/chain/protocol/asset.cpp
index e1169b0..7fcc977 100644
--- a/libraries/chain/protocol/asset.cpp
+++ b/libraries/chain/protocol/asset.cpp
@@ -26,8 +26,9 @@
 #include <boost/multiprecision/cpp_int.hpp>
 
 namespace graphene { namespace chain {
-      typedef boost::multiprecision::uint128_t uint128_t;
+
       typedef boost::multiprecision::int128_t  int128_t;
+      typedef boost::multiprecision::uint128_t uint128_t;
 
       bool operator == ( const price& a, const price& b )
       {
